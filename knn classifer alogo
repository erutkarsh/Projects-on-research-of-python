import numpy as np
def distance(p1,p2):
    """Function to find the nearest neighbour"""
    return np.sqrt(np.sum(np.power(p1-p2,2)))
p1=np.array([1,1])
p2=np.array([4,4])
distance(p1,p2)

import random
def majority_vote(votes):
    """Returns the most number of votes"""
    vote_counts={}
    for vote in votes:
        if vote in vote_counts:
            vote_counts[vote]+=1
        else:
            vote_counts[vote]=1
    
    winners=[]
    max_count=max(vote_counts.values())
    for vote,count in vote_counts.items():
        if count==max_count:
            winners.append(vote)
    return random.choice(winners)

import scipy.stats as ss
def majority_short_vote(votes):
    mode,count= ss.mstats.mode(votes)
    return mode

import numpy as np
def nearest_neighbors_distance(p,points,k=5):
    """returns k nearest neighbors of point p and their indices"""
    distances=np.zeros(points.shape[0])
    for i in range(len(distances)):
        distances[i]=distance(p,points[i])
    ind=np.argsort(distances)
    return ind[0:k]

def knn_predict(p,points,outcomes,k=5):
    nearest_neighbors_distance(p,points,k=5)
    return majority_vote(outcomes[ind])

import matplotlib.pyplot as plt
def generate_synth_data(n=50):
    points=np.concatenate((ss.norm(0,1).rvs((n,2)),ss.norm(1,1).rvs((n,2))),axis=0)
    outcomes=np.concatenate((np.repeat(0,n),np.repeat(1,n)))
    return (points,outcomes)

n=20
plt.figure()
plt.plot(points[:n,0],points[:n,1],"ro")
plt.plot(points[n:,0],points[n:,1],"bo")
plt.savefig("bivariatedata.pdf")

def make_prediction_grid(predictors,outcomes,limits,h,k):
    (x_min,x_max,y_min,y_max)=limits
    xs=np.arange(x_min,x_max,h)
    ys=np.arange(y_min,y_max,h)
    xx,yy=np.meshgrid(xs,ys)
    
    prediction_grid=np.zeros(xx.shape,dtype=int)
    for i,x in enumerate(xs):
        for j,y in enumerate(ys):
            p=np.array([x,y])
            prediction_grid[j,i]=knn_predict(p,predictors,outcomes,k)
    return (xx,yy,prediction_grid)

(predictors,outcomes)=generate_synth_data()
k=5
filename="knn_synth_5.pdf"
limits=(-3,4,-3,4)
h=0.1
(xx,yy,prediction_grid)=make_prediction_grid(predictors,outcomes,limits,h,k)
plot_prediction_grid(xx,yy,prediction_grid,filename)

from sklearn import datasets

iris = datasets.load_iris()
predictors=iris.data[:,0:2]
outcomes=iris.target

plt.plot(predictors[outcomes==0][:,1],predictors[outcomes==0][:,1],"ro")
plt.plot(predictors[outcomes==1][:,1],predictors[outcomes==1][:,1],"bo")
plt.plot(predictors[outcomes==2][:,1],predictors[outcomes==2][:,1],"go")
plt.savefig("iris.pdf")
