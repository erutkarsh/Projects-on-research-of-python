inputfile="Dna.txt"
f=open(inputfile,"r")
seq=f.read()
seq=seq.replace("\n","")
seq=seq.replace("\r","")
def translation(seq):
        table = { 
            'ATA':'I', 'ATC':'I', 'ATT':'I', 'ATG':'M', 
            'ACA':'T', 'ACC':'T', 'ACG':'T', 'ACT':'T', 
            'AAC':'N', 'AAT':'N', 'AAA':'K', 'AAG':'K', 
            'AGC':'S', 'AGT':'S', 'AGA':'R', 'AGG':'R',                  
            'CTA':'L', 'CTC':'L', 'CTG':'L', 'CTT':'L', 
            'CCA':'P', 'CCC':'P', 'CCG':'P', 'CCT':'P', 
            'CAC':'H', 'CAT':'H', 'CAA':'Q', 'CAG':'Q', 
            'CGA':'R', 'CGC':'R', 'CGG':'R', 'CGT':'R', 
            'GTA':'V', 'GTC':'V', 'GTG':'V', 'GTT':'V', 
            'GCA':'A', 'GCC':'A', 'GCG':'A', 'GCT':'A', 
            'GAC':'D', 'GAT':'D', 'GAA':'E', 'GAG':'E', 
            'GGA':'G', 'GGC':'G', 'GGG':'G', 'GGT':'G', 
            'TCA':'S', 'TCC':'S', 'TCG':'S', 'TCT':'S', 
            'TTC':'F', 'TTT':'F', 'TTA':'L', 'TTG':'L', 
            'TAC':'Y', 'TAT':'Y', 'TAA':'_', 'TAG':'_', 
            'TGC':'C', 'TGT':'C', 'TGA':'_', 'TGG':'W', 
        } 
       #assigning a empty string 
        protein ="" 
       #Check the sequence is divisible by 3
        if len(seq)%3 == 0: 
           #loop over the sequence 
            for i in range(0, len(seq), 3): 
                #extract a single codon
                codon = seq[i:i + 3] 
                #Look up the codon and store results
                protein+= table[codon] 
                
        return protein
#another method of read the data with "with" statement
def read_seq(inputfile): 
    with open(inputfile, "r") as f: 
        seq = f.read() 
    seq = seq.replace("\n", "") 
    seq = seq.replace("\r", "") 
    return seq 
  
prt = read_seq("Protein.txt") 
dna = read_seq("Dna.txt") 
 
#in console of your ide check the following condition
p=translation(dna[20:935]) #we use slicing from 20 to 935 because at ncbi the range of genome is 20-937
p==prt
#if it returns true then it means your translation algo is correct and case study is successful;
  



       
        
               
